{"version":3,"sources":["Components/Calendars.js","Components/Activeusers.js","App.js","serviceWorker.js","index.js"],"names":["Calendars","props","React","useState","modalIsOpen","setIsOpen","formatDate","startDate","setStartDate","endDate","setEndDate","selected","setSelected","from","setFrom","closeModal","Date","date","useEffect","filteredDates","user","activity_periods","filter","dates","start_time","substr","console","log","dateChanged","className","onClick","isOpen","onRequestClose","style","content","margin","top","left","right","bottom","marginRight","transform","height","width","contentLabel","real_name","id","onChange","selectsStart","selectsEnd","minDate","map","sh","index","key","fontSize","end_time","timein","timeout","StyledTableCell","withStyles","theme","head","backgroundColor","color","palette","common","white","body","TableCell","StyledTableRow","TableRow","Activeusers","TableContainer","component","Paper","Table","aria-label","TableHead","align","TableBody","data","item","tz","time_in","activities","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8bdd2871.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport \"../App.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport EventIcon from \"@material-ui/icons/Event\";\r\nimport FiberManualRecordRoundedIcon from '@material-ui/icons/FiberManualRecordRounded';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./calender.scss\";\r\n\r\nimport \"moment/locale/ko\";\r\n\r\nfunction Calendars(props) {\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n  const openModal = () => {\r\n    setIsOpen(true);\r\n  };\r\n  const customStyles = {\r\n    content: {\r\n      margin: \"0 auto\",\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      right: \"auto\",\r\n      bottom: \"auto\",\r\n      marginRight: \"-50%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n      height: \"50%\",\r\n      width: \"45%\",\r\n    },\r\n  };\r\n\r\n  const [startDate, setStartDate] = useState(formatDate());\r\n  const [endDate, setEndDate] = useState(formatDate());\r\n  const [selected, setSelected] = useState(false);\r\n  const [from, setFrom] = useState({});\r\n\r\n\r\n  function closeModal() {\r\n    setIsOpen(false);\r\n  }\r\n\r\n  function formatDate() {\r\n    return new Date(props.date);\r\n  }\r\n\r\n  function dateChanged() {\r\n    const filteredDates = props.user.activity_periods.filter((dates) => { return new Date(dates.start_time.substr(0, 11)) >= startDate && new Date(dates.start_time.substr(0, 11)) <= endDate });\r\n    console.log(\"filtered:\", filteredDates);\r\n    setFrom(filteredDates);\r\n  }\r\n\r\n  useEffect(() => {\r\n    dateChanged();\r\n  }, [endDate, startDate]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <a className=\"open-popup\" onClick={openModal}>{props.date}</a>\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onRequestClose={closeModal}\r\n        style={customStyles}\r\n        contentLabel=\"Example Modal\"\r\n      >\r\n        <div className=\"modal-header\">\r\n          {\" \"}\r\n          User Information{\" \"}\r\n          <CancelIcon\r\n            className=\"modal-header close-icon\"\r\n            onClick={closeModal}\r\n          />{\" \"}\r\n        </div>\r\n        <div className=\"flex-show\">\r\n          <hr className=\"hr-line\" />\r\n          <div className=\"user-details\">\r\n            <div className=\"user-details user-title\">User Name </div>\r\n            <div className=\"user-details user-data\">{props.user.real_name}</div>\r\n          </div>\r\n          <div className=\"user-details\">\r\n            <div className=\"user-details user-title\">User Id </div>\r\n            <div className=\"user-details user-data\">{props.user.id}</div>\r\n          </div>\r\n          <div className=\"user-details\">\r\n            <div className=\"user-details user-title\">Activity From</div>\r\n            <div className=\"user-details user-data\">\r\n              <DatePicker\r\n                selected={startDate}\r\n                onChange={(date) => { setStartDate(date) }}\r\n                selectsStart\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n              />\r\n              <EventIcon className=\"user-details calendar-icon\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"user-details\">\r\n            <div className=\"user-details user-title\">Activity To</div>\r\n            <div className=\"user-details user-data\">\r\n              <DatePicker\r\n                selected={endDate}\r\n                onChange={(date) => { setEndDate(date); setSelected(true); }}\r\n                selectsEnd\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                minDate={startDate}\r\n              />\r\n              <EventIcon className=\"user-details calendar-icon\" />\r\n            </div>\r\n          </div>\r\n          {selected &&\r\n            <div className=\"user-details\">\r\n              <div className=\"user-details user-title\">Online Time</div>\r\n              <div className=\"user-details user-data\">{\r\n                from.map((sh, index) => {\r\n                  return (\r\n                    <div key=\"index\">\r\n                      <FiberManualRecordRoundedIcon fontSize=\"small\" className=\"eye-icon\" />{sh.start_time}{\" \"}To{\" \"}{sh.end_time.substr(13)}\r\n                    </div>\r\n                  )\r\n\r\n                })}\r\n              </div>\r\n            </div>}\r\n          {!selected && <div className=\"user-details\">\r\n            <div className=\"user-details user-title\">Online Time</div>\r\n            <div className=\"user-details user-data\"><div><FiberManualRecordRoundedIcon fontSize=\"small\" className=\"eye-icon\" />\r\n              {props.date} {props.timein} {\" \"}\r\n          To {props.timeout}</div></div>\r\n          </div>\r\n          }\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calendars;","import React from \"react\";\r\nimport \"../App.css\";\r\nimport data from \"../Test_JSON.json\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AccountCircleRoundedIcon from \"@material-ui/icons/AccountCircleRounded\";\r\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\r\nimport EventIcon from \"@material-ui/icons/Event\";\r\nimport Calendars from \"./Calendars\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: '#559CAD',\r\n    color: theme.palette.common.white,\r\n    fontSize: \"1.5rem\",\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({}))(TableRow);\r\n\r\nfunction Activeusers() {\r\n  return (\r\n    <div>\r\n      <TableContainer component={Paper}>\r\n        <Table aria-label=\"customized table\">\r\n          <TableHead>\r\n            <StyledTableRow>\r\n              <StyledTableCell align=\"left\">\r\n                User Name\r\n                <AccountCircleRoundedIcon />\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"left\">\r\n                Location\r\n                <LocationOnIcon />\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"left\">\r\n                Activity Date <EventIcon />\r\n              </StyledTableCell>\r\n            </StyledTableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.map((item) => (\r\n              <TableRow key={item.id}>\r\n                <StyledTableCell align=\"left\">{item.real_name}</StyledTableCell>\r\n                <StyledTableCell align=\"left\">{item.tz}</StyledTableCell>\r\n                <StyledTableCell align=\"left\">\r\n                  {\" \"}\r\n                  {item.activity_periods.map((time_in, index) => {\r\n                    return (\r\n                      <Calendars key={index}\r\n                        date={time_in.start_time.substr(0, 11)}\r\n                        timein={time_in.start_time.substr(12)}\r\n                        timeout={time_in.end_time.substr(12)}\r\n                        user={item}\r\n                        activities={item.activity_periods}\r\n                      />\r\n                    );\r\n                  })}\r\n                </StyledTableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Activeusers;\r\n","import React from 'react';\nimport Activeusers from './Components/Activeusers';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Activeusers />\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}